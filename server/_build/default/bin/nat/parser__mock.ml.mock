
type token = 
  | PLUS
  | MULT
  | IS
  | INTV of (
# 7 "bin/nat/parser.mly"
       (int)
# 10 "bin/nat/parser__mock.ml.mock"
)

# 1 "bin/nat/parser.mly"
  
  open Syntax

# 17 "bin/nat/parser__mock.ml.mock"

let menhir_begin_marker =
  0

and xv_toplevel =
  let _ = fun (_startpos : Lexing.position) (_endpos : Lexing.position) (_endpos__0_ : Lexing.position) (_symbolstartpos : Lexing.position) (_startofs : int) (_endofs : int) (_endofs__0_ : int) (_symbolstartofs : int) (_sloc : Lexing.position * Lexing.position) (_loc : Lexing.position * Lexing.position) (
# 15 "bin/nat/parser.mly"
                          n3
# 26 "bin/nat/parser__mock.ml.mock"
   : (
# 7 "bin/nat/parser.mly"
       (int)
# 30 "bin/nat/parser__mock.ml.mock"
  )) (_startpos_n3_ : Lexing.position) (_endpos_n3_ : Lexing.position) (_startofs_n3_ : int) (_endofs_n3_ : int) (_loc_n3_ : Lexing.position * Lexing.position) (
# 15 "bin/nat/parser.mly"
                      _4
# 34 "bin/nat/parser__mock.ml.mock"
   : unit) (_startpos__4_ : Lexing.position) (_endpos__4_ : Lexing.position) (_startofs__4_ : int) (_endofs__4_ : int) (_loc__4_ : Lexing.position * Lexing.position) (
# 15 "bin/nat/parser.mly"
               n2
# 38 "bin/nat/parser__mock.ml.mock"
   : (
# 7 "bin/nat/parser.mly"
       (int)
# 42 "bin/nat/parser__mock.ml.mock"
  )) (_startpos_n2_ : Lexing.position) (_endpos_n2_ : Lexing.position) (_startofs_n2_ : int) (_endofs_n2_ : int) (_loc_n2_ : Lexing.position * Lexing.position) (
# 15 "bin/nat/parser.mly"
         _2
# 46 "bin/nat/parser__mock.ml.mock"
   : unit) (_startpos__2_ : Lexing.position) (_endpos__2_ : Lexing.position) (_startofs__2_ : int) (_endofs__2_ : int) (_loc__2_ : Lexing.position * Lexing.position) (
# 15 "bin/nat/parser.mly"
  n1
# 50 "bin/nat/parser__mock.ml.mock"
   : (
# 7 "bin/nat/parser.mly"
       (int)
# 54 "bin/nat/parser__mock.ml.mock"
  )) (_startpos_n1_ : Lexing.position) (_endpos_n1_ : Lexing.position) (_startofs_n1_ : int) (_endofs_n1_ : int) (_loc_n1_ : Lexing.position * Lexing.position) ->
    ((
# 15 "bin/nat/parser.mly"
                                  ( MultExp (n1, n2, n3) )
# 59 "bin/nat/parser__mock.ml.mock"
     : 'tv_toplevel) : (
# 10 "bin/nat/parser.mly"
      (Syntax.judgement)
# 63 "bin/nat/parser__mock.ml.mock"
    )) in
  let _ = fun (_startpos : Lexing.position) (_endpos : Lexing.position) (_endpos__0_ : Lexing.position) (_symbolstartpos : Lexing.position) (_startofs : int) (_endofs : int) (_endofs__0_ : int) (_symbolstartofs : int) (_sloc : Lexing.position * Lexing.position) (_loc : Lexing.position * Lexing.position) (
# 14 "bin/nat/parser.mly"
                          n3
# 68 "bin/nat/parser__mock.ml.mock"
   : (
# 7 "bin/nat/parser.mly"
       (int)
# 72 "bin/nat/parser__mock.ml.mock"
  )) (_startpos_n3_ : Lexing.position) (_endpos_n3_ : Lexing.position) (_startofs_n3_ : int) (_endofs_n3_ : int) (_loc_n3_ : Lexing.position * Lexing.position) (
# 14 "bin/nat/parser.mly"
                      _4
# 76 "bin/nat/parser__mock.ml.mock"
   : unit) (_startpos__4_ : Lexing.position) (_endpos__4_ : Lexing.position) (_startofs__4_ : int) (_endofs__4_ : int) (_loc__4_ : Lexing.position * Lexing.position) (
# 14 "bin/nat/parser.mly"
               n2
# 80 "bin/nat/parser__mock.ml.mock"
   : (
# 7 "bin/nat/parser.mly"
       (int)
# 84 "bin/nat/parser__mock.ml.mock"
  )) (_startpos_n2_ : Lexing.position) (_endpos_n2_ : Lexing.position) (_startofs_n2_ : int) (_endofs_n2_ : int) (_loc_n2_ : Lexing.position * Lexing.position) (
# 14 "bin/nat/parser.mly"
         _2
# 88 "bin/nat/parser__mock.ml.mock"
   : unit) (_startpos__2_ : Lexing.position) (_endpos__2_ : Lexing.position) (_startofs__2_ : int) (_endofs__2_ : int) (_loc__2_ : Lexing.position * Lexing.position) (
# 14 "bin/nat/parser.mly"
  n1
# 92 "bin/nat/parser__mock.ml.mock"
   : (
# 7 "bin/nat/parser.mly"
       (int)
# 96 "bin/nat/parser__mock.ml.mock"
  )) (_startpos_n1_ : Lexing.position) (_endpos_n1_ : Lexing.position) (_startofs_n1_ : int) (_endofs_n1_ : int) (_loc_n1_ : Lexing.position * Lexing.position) ->
    ((
# 14 "bin/nat/parser.mly"
                                  ( PlusExp (n1, n2, n3) )
# 101 "bin/nat/parser__mock.ml.mock"
     : 'tv_toplevel) : (
# 10 "bin/nat/parser.mly"
      (Syntax.judgement)
# 105 "bin/nat/parser__mock.ml.mock"
    )) in
  ((let rec diverge() = diverge() in diverge()) : 'tv_toplevel)

and menhir_end_marker =
  0
