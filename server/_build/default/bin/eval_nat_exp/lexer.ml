# 1 "bin/eval_nat_exp/lexer.mll"
 
  let reservedWords = [
    (* Keywords *)
  ]

# 8 "bin/eval_nat_exp/lexer.ml"
let __ocaml_lex_tables = {
  Lexing.lex_base =
   "\000\000\244\255\245\255\246\255\004\000\248\255\000\000\001\000\
    \000\000\000\000\253\255\254\255\004\000\000\000\001\000\001\000\
    \000\000\252\255\002\000\005\000\251\255\001\000\001\000\006\000\
    \250\255\249\255\247\255\001\000\005\000\255\255\254\255\005\000\
    \255\255";
  Lexing.lex_backtrk =
   "\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\000\000\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255";
  Lexing.lex_default =
   "\255\255\000\000\000\000\000\000\255\255\000\000\255\255\255\255\
    \255\255\255\255\000\000\000\000\255\255\255\255\255\255\255\255\
    \255\255\000\000\255\255\255\255\000\000\255\255\255\255\255\255\
    \000\000\000\000\000\000\255\255\255\255\000\000\000\000\255\255\
    \000\000";
  Lexing.lex_trans =
   "\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\012\000\012\000\000\000\012\000\012\000\012\000\000\000\
    \012\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \012\000\000\000\000\000\000\000\012\000\000\000\000\000\000\000\
    \003\000\002\000\010\000\011\000\026\000\030\000\032\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\004\000\028\000\000\000\000\000\000\000\
    \000\000\000\000\005\000\029\000\000\000\000\000\000\000\000\000\
    \000\000\014\000\000\000\000\000\000\000\009\000\023\000\000\000\
    \000\000\006\000\021\000\000\000\018\000\015\000\022\000\017\000\
    \008\000\000\000\000\000\025\000\007\000\016\000\013\000\019\000\
    \020\000\024\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \001\000\000\000\000\000\000\000\000\000\000\000\000\000";
  Lexing.lex_check =
   "\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\000\000\000\000\255\255\000\000\012\000\012\000\255\255\
    \012\000\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \000\000\255\255\255\255\255\255\012\000\255\255\255\255\255\255\
    \000\000\000\000\000\000\000\000\004\000\028\000\031\000\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\000\000\027\000\255\255\255\255\255\255\
    \255\255\255\255\000\000\027\000\255\255\255\255\255\255\255\255\
    \255\255\013\000\255\255\255\255\255\255\000\000\022\000\255\255\
    \255\255\000\000\007\000\255\255\008\000\014\000\021\000\016\000\
    \000\000\255\255\255\255\006\000\000\000\015\000\009\000\018\000\
    \019\000\023\000\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \000\000\255\255\255\255\255\255\255\255\255\255\255\255";
  Lexing.lex_base_code =
   "";
  Lexing.lex_backtrk_code =
   "";
  Lexing.lex_default_code =
   "";
  Lexing.lex_trans_code =
   "";
  Lexing.lex_check_code =
   "";
  Lexing.lex_code =
   "";
}

let rec main lexbuf =
   __ocaml_lex_main_rec lexbuf 0
and __ocaml_lex_main_rec lexbuf __ocaml_lex_state =
  match Lexing.engine __ocaml_lex_tables __ocaml_lex_state lexbuf with
      | 0 ->
# 8 "bin/eval_nat_exp/lexer.mll"
                            ( main lexbuf )
# 117 "bin/eval_nat_exp/lexer.ml"

  | 1 ->
# 9 "bin/eval_nat_exp/lexer.mll"
      ( Parser.PLUSOP )
# 122 "bin/eval_nat_exp/lexer.ml"

  | 2 ->
# 10 "bin/eval_nat_exp/lexer.mll"
      ( Parser.MULTOP )
# 127 "bin/eval_nat_exp/lexer.ml"

  | 3 ->
# 11 "bin/eval_nat_exp/lexer.mll"
           ( Parser.EVALTO )
# 132 "bin/eval_nat_exp/lexer.ml"

  | 4 ->
# 12 "bin/eval_nat_exp/lexer.mll"
         ( Parser.PLUS )
# 137 "bin/eval_nat_exp/lexer.ml"

  | 5 ->
# 13 "bin/eval_nat_exp/lexer.mll"
          ( Parser.MULT )
# 142 "bin/eval_nat_exp/lexer.ml"

  | 6 ->
# 14 "bin/eval_nat_exp/lexer.mll"
       ( Parser.IS )
# 147 "bin/eval_nat_exp/lexer.ml"

  | 7 ->
# 15 "bin/eval_nat_exp/lexer.mll"
      ( Parser.INTV 0 )
# 152 "bin/eval_nat_exp/lexer.ml"

  | 8 ->
# 16 "bin/eval_nat_exp/lexer.mll"
       ( let i = 1 in succ i lexbuf )
# 157 "bin/eval_nat_exp/lexer.ml"

  | 9 ->
# 17 "bin/eval_nat_exp/lexer.mll"
      ( Parser.LPAREN )
# 162 "bin/eval_nat_exp/lexer.ml"

  | 10 ->
# 18 "bin/eval_nat_exp/lexer.mll"
      ( Parser.RPAREN )
# 167 "bin/eval_nat_exp/lexer.ml"

  | 11 ->
# 19 "bin/eval_nat_exp/lexer.mll"
      ( exit 0 )
# 172 "bin/eval_nat_exp/lexer.ml"

  | __ocaml_lex_state -> lexbuf.Lexing.refill_buff lexbuf;
      __ocaml_lex_main_rec lexbuf __ocaml_lex_state

and succ i lexbuf =
   __ocaml_lex_succ_rec i lexbuf 27
and __ocaml_lex_succ_rec i lexbuf __ocaml_lex_state =
  match Lexing.engine __ocaml_lex_tables __ocaml_lex_state lexbuf with
      | 0 ->
# 22 "bin/eval_nat_exp/lexer.mll"
      ( succ_rparen i lexbuf; Parser.INTV i )
# 184 "bin/eval_nat_exp/lexer.ml"

  | 1 ->
# 23 "bin/eval_nat_exp/lexer.mll"
       ( succ (i+1) lexbuf )
# 189 "bin/eval_nat_exp/lexer.ml"

  | __ocaml_lex_state -> lexbuf.Lexing.refill_buff lexbuf;
      __ocaml_lex_succ_rec i lexbuf __ocaml_lex_state

and succ_rparen i lexbuf =
   __ocaml_lex_succ_rparen_rec i lexbuf 31
and __ocaml_lex_succ_rparen_rec i lexbuf __ocaml_lex_state =
  match Lexing.engine __ocaml_lex_tables __ocaml_lex_state lexbuf with
      | 0 ->
# 26 "bin/eval_nat_exp/lexer.mll"
      ( if i = 1 then () else succ_rparen (i-1) lexbuf )
# 201 "bin/eval_nat_exp/lexer.ml"

  | __ocaml_lex_state -> lexbuf.Lexing.refill_buff lexbuf;
      __ocaml_lex_succ_rparen_rec i lexbuf __ocaml_lex_state

;;

